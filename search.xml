<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux调度算法]]></title>
    <url>%2F2019%2F09%2F07%2FLinux%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Linux调度器Linux 2.4内核提供了基于时间片轮转的动态优先级调度算法。多个CPU共享一个就绪队列，基于epoch分配时间片，每次调度需要迭代整个就绪队列，选择出优先级最高的进程运行。调度过程中的迭代时间复杂度为O(N)，又称为O(N)调度器。 Linux 2.6早期版本通过优化的数据结构解决了O(N)的问题。每个cpu维护一个运行队列，扩展性更好。支持静态优先级和动态优先级。静态优先级用来计算进程运行时间片，动态优先级用来计算调度先后。因为其算法复杂度为O(1), 又称为O(1)调度器。 Linux 2.6.26提供了一个公平的调度器，根据计算进程的消耗了CPU的时间大小来决定调度。每个进程维护一个虚拟时钟vruntime，调度器每次选vruntime最小的进程来运行。优先级高的进程vruntime增长得慢，从而有更多的执行机会。因为调度器总是选择消耗CPU时间最小的进程来运行，从而达到公平性，所以又称为完全公平(CFS)调度器。 O(1)调度器优先级Linux进程有个nice值是用来控制优先级的因子,nice值的取值范围是-20~19，值越低优先级越高。O(1)调度器的优先级分为静态优先级和动态优先级。实时进程优先级0-99，普通进程优先级100-139。实时进程只有静态优先级(0-99)，创建后不能变更了。普通进程的动态优先级是根据静态优先级和进程睡眠时间来计算的出来的。 时间片 优先级&lt;120，时间片=max((140-优先级)20, MIN_TIMESLICE)优先级&gt;=120，时间片=max((140-优先级)5, MIN_TIMESLICE) 优先级越高(值越小)，则分配的时间片越多 调度流程每个cpu维护一个运行队列，运行队列中包含active数组与expried数组。数组长度等于优先级个数(140). 每个优先级对应一个进程链表，存放到数组对应的下标里，并通过bitmap来标志对应的优先级是否有就绪进程。调度器每次从active数组中取出优先级别最高进程去执行，利用优先级位图从高到低找到第一个被设置的位,从该位对应的进程链表中取头进程。普通进程需要递减时间片，当时间片用完时把进程移动到expried数组对应的优先级链表中。当active数组空了，则交换active和expried，重复上述流程。 CFS调度器优先级进程维护一个虚拟时钟vruntime，调度器每次选择vruntime值最小的进程执行。vruntime时一个虚拟的运行时间，是实际运行时间根据进程权重放大或缩小的值。所以优先级，就是进程的权重。 虚拟运行时间 += 实际执行时间 * 1024 / 进程权重进程NICE值对应的权重 虚拟运行时间的增长速度与进程的权重成反比，优先级越高进程权重越大，则增长速度越慢。 时间片 运行片 = 调度周期 * 进程权重 / 所有进程权重之和 分配的时间片与进程权重成正比，优先级越高，时间片也越多 调度流程CFS调度流程主要分两大步骤，一是更新统计上一个进程的执行时间，二是挑选vruntime低的进程执行。 一. 时钟中断处理最终会调用scheduler_tick，然后根据sched_class调用cfs的实现方法task_tick_fair。该函数的执行流程： entity_tick: update_curr: 更新进程各种统计数据 calc_delta_fair: 计算进程vruntime的增长值 update_min_vruntime: 更新当前cpu最小虚拟运行时间 update_load_avg: 更新CPU负载 check_preempt_tick: 检查进程是否需要再次被调度 sched_slice:计算当前进程的理想执行时间 idealtime = slice * 进程权重 / 运行队列总权重进程数&lt;=8时：slice= 进程数 * 0.75ms进程数 &gt;8时： slice = 6ms 判断进程当前周期的时间片是否用完，用完则设置resched标记 二. 中断程序执行结束会执行schedule，该函数执行流程: sched_submit_work: 检查进程状态和死锁检查器，刷新plug队列避免死锁 循环执行__schedule rcu_note_context_switch更新全局状态，标识当前CPU发生上下文的切换 pick_next_task: 挑选优先级最高的进程 pick_next_task_fair pick_next_entity：获取vruntime最小的进程 context-switch: 进程上下文切换 prepare_task_switch:上下文切换准备工作 switch_mm_irqs_off: 切换页表 switch_to: 切换到新进程状态 load_TLS: 加载新进程进程执行环境，如子进程运行时各CPU寄存器的值、子进程的kernel栈的起始地址 switch_to_extra update_task_stack: 更新进程内核栈 refresh_sysenter_cs sched_update_worker]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统 linux进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[调度算法]]></title>
    <url>%2F2019%2F09%2F07%2F%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[调度概念在操作系统中调度是指一种资源分配，因而调度算法是指：根据系统的资源分配策略所规定的资源分配算法。对于不同的的系统和系统目标，通常采用不同的调度算法，例如，在批处理系统中，为了照顾为数众多的段作业，应采用短作业优先的调度算法；又如在分时系统中，为了保证系统具有合理的响应时间，应当采用轮转法进行调度。目前存在的多种调度算法中，有的算法适用于作业调度，有的算法适用于进程调度；但也有些调度算法既可以用于作业调度，也可以用于进程调度。 调度原则从系统角度来说，高性能，公平公正用户角度：响应快，周转短 调度算法分类先来先服务(FCFS)先来先服务(FCFS)调度算法是从就绪队列中选择一个最先进入该队列的进程分配CPU运行。直到完成或发生某事件而阻塞时，才释放CPU 优缺点：FCFS调度算法的特点是算法简单。但效率低，对长作业比较有利，但对短作业不利（相对SJF和高响应比）；有利于CPU繁忙型作业，而不利于I/O繁忙型作业。 短作业优先短作业优先(SJF)调度算法是从就绪队列中选择一个估计运行时间最短的进程分配CPU运行，直到完成或发生某事件而阻塞时，才释放CPU。 优缺点：SJF平均等待时间和周转时间短。但需要事先预知作业的运行时间，对长作业非常不利，未考虑紧迫程度，因此不能保证紧迫性作业得到及时解决，采用短作业优先调度算法无法实现人机交互。 优先级调度算法优先级调度算法中的优先级用于描述进程运行的紧迫程度,该算法从就绪队列中选择优先级最髙的进程分配CPU运行。 非抢占式优先级调度算法系统把CPU分配给就绪队列中优先权最高的进程执行后，直到完成或发生某事件而阻塞时，才释放CPU。系统方可再将CPU重新分配给另一优先权最高的进程。这种调度算法主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。 抢占式优先级调度算法系统把CPU分配给就绪队列中优先权最高的进程执行后，在其执行期间，只要又出现了另一个其优先权更高的进程，进程调度程序就立即停止当前进程(原优先权最高的进程)的执行，重新将CPU分配给新到的优先权最高的进程。这种抢占式的优先权调度算法能更好地满足紧迫作业的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中。 高响应比优先调度算法高响应比优先调度算法主要用于作业调度，该算法是对FCFS调度算法和SJF调度算法的一种综合平衡，同时考虑每个作业的等待时间和估计的运行时间。在每次进行作业调度时，先计算后备作业队列中每个作业的响应比，从中选出响应比最高的进程分配CPU运行。 $$ 优先级 = \dfrac{等待时间 + 预计运行时间}{预计运行时间} $$ 时间片的轮转调度算法时间片轮转调度算法主要适用于分时系统。在这种算法中，系统将所有就绪进程按到达时间的先后次序排成一个队列，进程调度程序总是选择就绪队列中第一个进程执行，即先来先服务的原则，但仅能运行一个时间片，如100ms。在使用完一个时间片后，即使进程并未完成其运行，它也必须释放出（被剥夺）处理机给下一个就绪的进程，而被剥夺的进程返回到就绪队列的末尾重新排队，等候再次运行。 最短剩余时间优先算法最短剩余时间优先(Shortest Remaining Time Next，SRTN)调度算法多用于剥夺式的调度中。在进程调度中，每次调度时，系统把CPU分配给就绪队列中运行完所需时间最短的进程。最短剩余时间优先算法也可用于不剥夺式调度方式中，此时退化为短作业优先算法。 多级反馈队列调度算法多级反馈队列调度算法是时间片轮转调度算法和优先级调度算法的综合和发展，通过动态调整进程优先级和时间片大小，多级反馈队列调度算法可以兼顾多方面的系统目标。例如，为提高系统吞吐量和缩短平均周转时间而照顾短进程；为获得较好的I/O设备利用率和缩短响应时间而照顾I/O型进程；同时，也不必事先估计进程的执行时间。 实现思路： 设置多个就绪队列，并为各个队列赋予由高到底的优先级 赋予各个队列中进程执行时间片由短到长。有限级别高的队列对应的时间片短。 新进程先放入第1级队列的末尾，按FCFS原则排队等待调度。时间片结束未完成则放入下一级优先队列的末尾。 仅当优先级高的队列为空时，调度程序才调度下一个优先级的队列中进程。 算法比较 比较项 调度方式 吞吐量 响应时间 开销 作业类型偏好 饥饿问题 先来先服务 非抢占 一般 可能很高 最小 不利于短作业，IO频繁 无 短作业优先 非抢占 高 短作业进程高 高 不礼运长作业 可能 优先级调度 可抢可不抢 一般 可能高 一般 实时进程 可能 高响应比优先 非抢占 高 较好 高 较均衡 无 时间片轮转 抢占式 低 短作业高 低 公平对待 无 最短剩余时间 抢占式 高 较好 高 不利于长作业 可能 多级反馈队列 抢占式 一般 一般 高 利于IO频繁作业 可能]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统 linux进程调度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[进程]]></title>
    <url>%2F2019%2F09%2F01%2F%E8%BF%9B%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[进程的概念进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是应用程序运行的载体，是操作系统进行资源分配和调度的基本单位，是操作系统结构的基础。同时也是线程的容器（通常一个进程包含若干个线程）。进程是一种抽象的概念。进程一般由程序，数据集合和进程控制块(PCB)三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块包含进程的描述信息和控制信息是进程存在的唯一标志。 进程的创建Linux的进程创建是通过系统调用fork,vfork,clone来完成的，vfork创建出来的是轻量级进程（线程）。而他们又用各自的参数标志去调用_do_fork()函数完成进程的创建工作，以下是具体执行流程： copy_process是将父进程的运行环境复制到子进程，并对特定的信息做响应的调整 dup_task_struct: 分配复制父进程task_struct, 分配内核栈 sched_fork: 设置子进程调度相关的参数，即子进程的运行CPU、初始时间片长度和静态优先级等 copy_semundo: 复制父进程的semaphore undo_list到子进程 copy_files、copy_fs: 复制父进程文件系统相关的环境到子进程 copy_sighand、copy_signal: 复制父进程信号处理相关的环境到子进程 copy_mm: 复制父进程内存管理相关的环境到子进程，包括页表、地址空间、代码、数据等。vfork创建的线程不复制，直接用父进程mm_struct. copy_namespace: 复制命名空间 copy_io: 复制父进程io上下文 copy_thread_tls: 设置子进程的执行环境，如子进程运行时各CPU寄存器的值、子进程的kernel栈的起始地址 wake_up_new_task将子进程加入到调度队列中 设置进程状态为TASK_RUNNING 设置合适的CPU，并加进程加入CPU调度队列 如果是vfork，将父进程加入等待队列 从上述执行流程我们可以看出，进程是又父进程复制出来，然后不断修改自己的私有信息的过程。因为在创建的过程中大部分复杂的数据结构都通过slab分配器来分配内存空间并直接将父进程已经结构化好的数据存储进去，没有其他系统那样的逐项初始化的过程， 所以Linux系统在进程管理方面要累量高效。想要了解更多细节可以查阅 源码入口 进程的销毁进程的销毁是通过系统调用exit来完成的。以下是具体执行流程： exit_itimers: 退出计时器队列 exit_signals: 设置PF_EXITING标志来表明进程正在退出，清除所有信号处理函数 exit_mm: 释放地址空间 exit_files、 exit_fs: 关闭所有打开的文件描述符，清理IO缓存。清除相关的inode exit_thread: 释放thread_info描述符和内核堆栈 exit_io_context: 清除IO上下文 do_task_dead: 设置销毁标志，调度新进程,并在调度新进程中最后释放task_struct的地址 进程的状态 状态 描述 TASK_NEW 初始状态，进程刚被创建是的状态 TASK_RUNNING 可执行状态，正在执行或在就绪队列中 TASK_INTERRUPTIBLE 可中断睡眠，表示进程因为等待某个事件而被系统挂起 TASK_UNINTERRUPTIBLE 不可中断睡眠，一般表示进程正在跟硬件交互，并且交互过程不允许被其他进程或中断打断 TASK_STOPPED 挂起状态，主要用于调试目的 TASK_TRACED 跟踪状态， EXIT_ZOMBIE 僵尸态，进程已经结束运行，但是进程控制块尚未注销 TASK_DEAD 退出状态 TASK_IDLE 空闲状态 更多状态请查看: 进程状态 进程运行中状态切换图]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统 linux进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNS系统]]></title>
    <url>%2F2019%2F08%2F25%2FDNS%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[DNS我们知道了域名解决了IP难以记忆的问题，但是机器只认识IP。要怎么把域名转换成机器认识的IP呢？DNS全称是Domain Name System，是互联往最核心的服务之一。它作为将域名和IP地址相互映射的一个分布式数据库，把域名解析成IP地址，能够使人更方便地访问互联网。 DNS协议域名解析过程 /etc/nsswitch.conf文件中配置host文件和系统dns的优先级 1hosts: files dns st=>start: 开始 e=>end: 结束 c1=>condition: 查询浏览器DNS Cache c2=>condition: 查询系统DNS Cache c3=>condition: 查询host文件的映射 c4=>condition: 查询本地DNS服务 c5=>condition: 迭代查询DNS服务 c6=>operation: 查询NetBIOS name Cache c7=>condition: 查询WINS 服务器 st->c1(no)->c2(no)->c3(no)->c4(no)->c5(no)->c6(right)->e c1(yes,right)->e c2(yes,right)->e c3(yes,right)->e c4(yes,right)->e c5(yes,right)->e{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[域名]]></title>
    <url>%2F2019%2F08%2F25%2F%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[域名域名（Domain names）是一串用点分割的字符组成的互联网上某一台计算机或某一组计算机的名称，用于数据传输是标志计算机器的方位，是互联网基础架构的关键部分。 域名作用我们知道网路是基于IP来传输的，为什么还需要域名呢?IPv4是由32位组成，通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32。IPv6是有128位组成，通常写成八组由冒号分隔的四个十六进制数组成，比如：fe80::b9a9:a905:5cd3:251e。计算机可以很容易地处理这些IP地址，但是对于人却很难记住哪个是baidu，哪个是taobao。要怎么解决这个问题呢？计算机领域的问题没有什么不能加一层来解决，解决不了就加两层。于是定义出一种更适合人类记忆的有意义的名字来区分不同的服务，并把这个名字与IP对应起来。这样人记忆这个域名，然后计算机用IP来处理网络传输。 域名结构域名一般由两个或两个以上的词构成，中间用“.”进行分隔，其结构是：四级域.三级域.二级域.顶级域.根域。最右边的区域具有最高级别（顶级域名）。 域名只有由字母数字和-组成，不区分大小写。每一级域名长度的限制是63个字符，完整域名总长度则不能超过253个字符.不同的顶级域名托管商，有不同的域名格式规则。我们熟知的百度域名为：www.baidu.com，实际上他的真正域名是： www.baidu.com.root。 最右边的root,也就是根域(根域对所有域名都是一样，所以平时省略)，com是顶级域，baidu是二级域，www则是主机名。从右至左逐级递减。最长可以有127级，每个域都有用一个域名服务器，管理则下属域名。 三级域/主机名 二级域 顶级域 根域 www .baidu .com . news .baidu .com . map .baidu .com . 各级域层级结构 graph TD id1[root] id1---id2[顶级域] id1---id4[net] id1---id5[org] id1---id3[com] id2---id6[二级域] id3---id8[qq] id3---id7[baidu] id3---id9[taobao] id6---id10[三级域] id7---id11[www] id7---id12[news] id7---id13[map] 常见的顶级域名： com - 供商业机构使用 edu - 供教育机构使用 gov - 供政府及其属下机构使用 net - 供网络服务供应商使用 org - 供不属于其他通用顶级域类别的组织使用]]></content>
      <categories>
        <category>互联网</category>
      </categories>
      <tags>
        <tag>互联网 网络基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CDN系统]]></title>
    <url>%2F2019%2F08%2F11%2FCDN%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
